/************************************************************************
Avalon-MM Interface VGA Text mode display

Register Map:
0x000-0x0257 : VRAM, 80x30 (2400 byte, 600 word) raster order (first column then row)
0x258        : control register

VRAM Format:
X->
[ 31  30-24][ 23  22-16][ 15  14-8 ][ 7    6-0 ]
[IV3][CODE3][IV2][CODE2][IV1][CODE1][IV0][CODE0]

IVn = Draw inverse glyph
CODEn = Glyph code from IBM codepage 437

Control Register Format:
[[31-25][24-21][20-17][16-13][ 12-9][ 8-5 ][ 4-1 ][   0    ] 
[[RSVD ][FGD_R][FGD_G][FGD_B][BKG_R][BKG_G][BKG_B][RESERVED]

VSYNC signal = bit which flips on every Vsync (time for new frame), used to synchronize software
BKG_R/G/B = Background color, flipped with foreground when IVn bit is set
FGD_R/G/B = Foreground color, flipped with background when Inv bit is set

************************************************************************/
`define NUM_REGS 601 //80*30 characters / 4 characters per register
`define CTRL_REG 600 //index of control register

module vga_text_avl_interface (
	// Avalon Clock Input, note this clock is also used for VGA, so this must be 50Mhz
	// We can put a clock divider here in the future to make this IP more generalizable
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,					// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,			// Avalon-MM Byte Enable
	input  logic [9:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,		// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,		// Avalon-MM Read Data
	
	// Exported Conduit (mapped to VGA port - make sure you export in Platform Designer)
	output logic [3:0]  red, green, blue,	// VGA color channels (mapped to output pins in top-level)
	output logic hs, vs						// VGA HS/VS
);

logic [31:0] LOCAL_REG       [`NUM_REGS]; // Registers



//put other local variables here
logic           blank, sync, VGA_clock;
logic [9:0] 	DrawX, DrawY;




//Declare submodules..e.g. VGA controller, ROMS, etc
// VGA_controller
vga_controller vga_controller_0 ( .Clk(CLK),
								  .Reset(RESET),
								  // outputs
								  .hs(hs),
								  .vs(vs),
								  .pixel_clk(VGA_clock),
								  .blank(blank),
								  .sync(sync),
								  .DrawX(DrawX),
								  .DrawY(DrawY) );




int i;

// Read and write from AVL interface to register block, note that READ waitstate = 1, so this should be in always_ff
always_ff @(posedge CLK)
begin 
	if (RESET) 
	begin
		for (i = 0; i < 601; i = i + 1) 
		begin
			LOCAL_REG[i] <= 32'h0;
		end
	end	
	//LOCAL_REG <= '{default: '0};
	else if (AVL_WRITE && AVL_CS) 
		case (AVL_BYTE_EN)
				4'b1111 : 
					LOCAL_REG[AVL_ADDR] <= AVL_WRITEDATA;
				4'b1100 : 
				    LOCAL_REG[AVL_ADDR][31:16] <= AVL_WRITEDATA[31:16];
				4'b0011 : 
					LOCAL_REG[AVL_ADDR][15:0] <= AVL_WRITEDATA[15:0];
				4'b1000 :
					LOCAL_REG[AVL_ADDR][31:24] <= AVL_WRITEDATA[31:24];
				4'b0100 :
					LOCAL_REG[AVL_ADDR][23:16] <= AVL_WRITEDATA[23:16];
				4'b0010 :
					LOCAL_REG[AVL_ADDR][15:8] <= AVL_WRITEDATA[15:8];
				4'b0001 :
					LOCAL_REG[AVL_ADDR][7:0] <= AVL_WRITEDATA[7:0];
				default : 
					LOCAL_REG[AVL_ADDR] <= 32'h0;
		endcase
//	else 
//		LOCAL_REG[AVL_ADDR] <= LOCAL_REG[AVL_ADDR];
end

always_comb
begin 
	if (AVL_READ && AVL_CS) 
	begin
		AVL_READDATA = LOCAL_REG[AVL_ADDR];
	end
	else 
	begin
		AVL_READDATA = 32'h0;
	end
end




//handle drawing (may either be combinational or sequential - or both).
logic           inversebit;
logic [1:0]     charSelect;
logic [2:0]		DrawXmod;
logic [3:0]     DrawYmod;
logic [4:0]     charX;
logic [6:0]     charY;
logic [7:0]     data;
logic [9:0]     ADDR_VRAM;
logic [10:0]    addr0;


assign charX = DrawX[9:3]; // DrawX/8
assign charY = DrawY[9:4]; // DrawY/16
assign ADDR_VRAM = (charY*80 + charX)/4;
assign charSelect = (charY*80 + charX) % 4;
assign DrawXmod = DrawX % 8;         // pixel x locations of electron gun at each word [7:0]
assign DrawYmod = DrawY % 16;		 // pixel y locations of electron gun at each word [15:0]


always_comb
begin 
	if (charSelect == 2'b00) 
	begin 
		addr0 = 16*LOCAL_REG[ADDR_VRAM][6:0];
		inversebit = LOCAL_REG[ADDR_VRAM][7];
	end
	else if (charSelect == 2'b01) 
	begin
		addr0 = 16*LOCAL_REG[ADDR_VRAM][14:8];
		inversebit = LOCAL_REG[ADDR_VRAM][15];
	end
	else if (charSelect == 2'b10)
	begin
		addr0 = 16*LOCAL_REG[ADDR_VRAM][22:16];
		inversebit = LOCAL_REG[ADDR_VRAM][23];
	end
	else if (charSelect == 2'b11)
	begin
		addr0 = 16*LOCAL_REG[ADDR_VRAM][30:24];
		inversebit = LOCAL_REG[ADDR_VRAM][31];
	end
	else 
	begin
		addr0 = 11'h0;
		inversebit = 1'b0;
	end
end

font_rom font_rom_1 (.addr(addr0 + DrawYmod), .data(data));

always_comb
begin:Printing
	if (blank)
	begin
		if (7-data[DrawXmod])
		begin
			if (!inversebit)
			begin 
				red = LOCAL_REG[600][24:21];
				green = LOCAL_REG[600][20:17];
				blue = LOCAL_REG[600][16:13];
			end
			else 
			begin
				red = LOCAL_REG[600][12:9];
				green = LOCAL_REG[600][8:5];
				blue = LOCAL_REG[600][4:1];
			end
		end 
		else 
		begin 
			if (!inversebit)
			begin
				red = LOCAL_REG[600][12:9];
				green = LOCAL_REG[600][8:5];
				blue = LOCAL_REG[600][4:1];
			end
			else 
			begin
				red = LOCAL_REG[600][24:21];
				green = LOCAL_REG[600][20:17];
				blue = LOCAL_REG[600][16:13];
			end
		end  
	end
	else 
	begin 
		red = 4'h0;
		green = 4'h0;
		blue = 4'h0;
	end
end
endmodule